## --------------------------------------------------------------------------------------------------------------------
## GITHUB CONFIGURATION
## Define which Github repositories the Terraform blueprint user has access to
## 
## This optional configuration will submit a pull request to Github with the Terraform code generated by this blueprint
## after the user has completed the generation steps. This Terraform blueprint is functional without the Github
## integration, and the code may be downloaded after submission for review and deployment, as well as the historical 
## activity portion of the Iac catalog on AutoCloud.
##
## Before this feature can be enabled, you will need to integrate
## AutoCloud with your Github organization by deploying the AutoCloud Github application. For more information on this
## process, see https://docs.autocloud.io/integration-with-source-control-github.
##
## Once the integration is configured, uncomment the code block below, as well as the code block defining the git pull
## request parameters at the bottom of this file.
## --------------------------------------------------------------------------------------------------------------------

## ----- BEGIN GITHUB CONFIGURATION ----- ##
# data "autocloud_github_repos" "repos" {}

# locals {
#   # A list of Github repositories the user is allowed to submit Terraform code to, add specific repositories out of the
#   # repositories you have authorized AutoCloud to access to limit users to your infrastructure as code repositories. If
#   # you set these, uncomment the filter lines in the `dest_repos` definition on lines 20-23 below.
#   # 
#   # allowed_repos = [
#   #   "example",
#   # ]

#   # Destination repos where generated code will be submitted
#   dest_repos = [
#     for repo in data.autocloud_github_repos.repos.data[*].url : repo

#     # Uncomment if you have defined an allow list for your repos on lines 12-14 above.
#     #
#     # if anytrue([
#     #   for allowed_repo in local.allowed_repos: length(regexall(format("/%s", allowed_repo), repo)) > 0
#     # ])
#   ]
# }
## ----- END GITHUB CONFIGURATION ----- ##



## --------------------------------------------------------------------------------------------------------------------
## GLOBAL BLUEPRINT CONFIGURATION
## Define form questions the user will be shown which are either not associated with any Terraform module, or are shared
## between multiple Terraform modules.
## --------------------------------------------------------------------------------------------------------------------

data "autocloud_blueprint_config" "global" {
  ###
  # Hard code `enabled` to true to create all assets
  variable {
    name  = "enabled"
    value = true
  }

  ###
  # Set the namespace
  variable {
    name         = "namespace"
    display_name = "Namespace"
    helper_text  = "The organization namespace the assets will be deployed in"

    type = "shortText"

    value = "autocloud"
  }

  ###
  # Choose the environment
  variable {
    name         = "environment"
    display_name = "Environment"
    helper_text  = "The environment the assets will be deployed in"

    type = "radio"

    options {
      option {
        label   = "Sandbox"
        value   = "sandbox"
        checked = true
      }
      option {
        label = "Nonprod"
        value = "nonprod"
      }
      option {
        label = "Production"
        value = "production"
      }
    }
  }

  ###
  # Collect the name of the asset group
  variable {
    name         = "name"
    display_name = "Name"
    helper_text  = "The name of the encrypted S3 bucket"

    type = "shortText"

    validation_rule {
      rule          = "isRequired"
      error_message = "You must provide a name for the encrypted S3 bucket"
    }
  }
}



## --------------------------------------------------------------------------------------------------------------------
## AWS CONFIGURATION
## Define AWS specific elements that will be added to all assets, such as tags and tags
## between multiple Terraform modules.
## --------------------------------------------------------------------------------------------------------------------

data "autocloud_blueprint_config" "aws" {
  ###
  # Collect tags to apply to assets
  variable {
    name         = "tags"
    display_name = "Tags"
    helper_text  = "A map of tags to apply to the deployed assets"

    type = "map"
  }
}

## --------------------------------------------------------------------------------------------------------------------
## ECS CLUSTER MODULE
## Define display and output for the ECS Cluster to deploy
## --------------------------------------------------------------------------------------------------------------------

resource "autocloud_module" "cluster" {
  name    = "cluster"
  source  = "cloudposse/ecs-cluster/aws"
  version = "0.4.1"
}

data "autocloud_blueprint_config" "cluster" {
  source = {
    global  = data.autocloud_blueprint_config.global.blueprint_config,
    aws     = data.autocloud_blueprint_config.aws.blueprint_config,
    cluster = autocloud_module.cluster.blueprint_config
  }

  omit_variables = [
    "cluster.variables.capacity_providers_ec2",
    "cluster.variables.container_insights_enabled",
    "cluster.variables.default_capacity_strategy",
    "cluster.variables.external_ec2_capacity_providers",
    "cluster.variables.kms_key_id",
    "cluster.variables.log_configuration",
    "cluster.variables.logging"
  ]

  ###
  # Set the enabled flag
  variable {
    name  = "cluster.variables.enabled"
    value = "global.variables.enabled"
  }

  ###
  # Set the environment
  variable {
    name  = "cluster.variables.environment"
    value = "global.variables.environment"
  }

  ###
  # Set the name
  variable {
    name  = "cluster.variables.name"
    value = "global.variables.name"
  }

  ###
  # Set the namespace
  variable {
    name  = "cluster.variables.namespace"
    value = "global.variables.namespace"
  }

  ###
  # Force Fargate
  variable {
    name  = "cluster.variables.capacity_providers_fargate"
    value = true
  }


  ###
  # Use spot instances
  variable {
    name         = "cluster.variables.capacity_providers_fargate_spot"
    display_name = "Use Spot Capacity"
    helper_text  = "Use AWS spot fleet capacity for execution. Lowers cost, but job may be interrupted at any time."
    # type         = "checkbox"
  }

  ###
  # Cluster name
  variable {
    name         = "cluster.variables.full_cluster_name"
    display_name = "Cluster Name"
    helper_text  = "The full name of the cluster to be generated"
    type         = "shortText"
    value        = "{{namespace}}-{{environment}}-{{name}}"
    variables = {
      namespace   = "global.variables.namespace"
      environment = "global.variables.environment"
      name        = "global.variables.name"
    }
  }


  ###
  # Set the tags
  variable {
    name  = "cluster.variables.tags"
    value = "aws.variables.tags"
  }

}



## --------------------------------------------------------------------------------------------------------------------
## COMPLETE BLUEPRINT CONFIGURATION
## Combine all the defined Terraform blueprint configurations into the complete blueprint configuration that will be used
## to create the form shown to the end user.
## --------------------------------------------------------------------------------------------------------------------

data "autocloud_blueprint_config" "complete" {
  source = {
    global  = data.autocloud_blueprint_config.global.blueprint_config,
    aws     = data.autocloud_blueprint_config.aws.blueprint_config,
    cluster = data.autocloud_blueprint_config.cluster.blueprint_config,
    # kms    = data.autocloud_blueprint_config.kms_key.blueprint_config,
  }

  ###
  # Hide variables from user
  omit_variables = [
    ###
    # Global

    # Use defaults in the module (don't collect)
    "additional_tag_map",
    "attributes",
    "context",
    "delimiter",
    "descriptor_formats",
    "id_length_limit",
    "label_key_case",
    "label_order",
    "label_value_case",
    "labels_as_tags",
    "regex_replace_chars",
    "stage",
    "tenant",

    # Defined values
    "enabled",

    ###
    # ECS Cluster
    "cluster.variables.capacity_providers_fargate",
    "cluster.variables.environment",
    "cluster.variables.name",
    "cluster.variables.namespace",
    "cluster.variables.tags",
  ]

  ###
  # Set the order in which the variables are displayed to the user
  display_order {
    priority = 0
    values = [
      "global.variables.namespace",
      "global.variables.environment",
      "global.variables.name",
      "cluster.variables.full_cluster_name",
      "cluster.variables.capacity_providers_fargate_spot",
      "aws.variables.tags",
    ]
  }
}



## --------------------------------------------------------------------------------------------------------------------
## AUTOCLOUD BLUEPRINT
## Create the AutoCloud Terraform blueprint using the modules and blueprint configurations defined above. 
## --------------------------------------------------------------------------------------------------------------------

resource "autocloud_blueprint" "this" {
  name = "[Example] ECS Fargate Cluster"

  ###
  # UI Configuration
  #
  author       = "chris@autocloud.dev"
  description  = "Deploy an ECS cluster targeting fargate to an AWS account."
  instructions = <<-EOT
    To deploy this generator, these simple steps:

      * step 1: Choose the target environment
      * step 2: Provide a name to identify assets
      * step 3: Add tags to apply to assets
    EOT

  labels = ["aws"]



  ###
  # Form configuration
  config = data.autocloud_blueprint_config.complete.config



  ###
  # File definitions
  file {
    action      = "CREATE"
    destination = "{{namespace}}-{{environment}}-{{name}}.tf"
    variables = {
      namespace   = data.autocloud_blueprint_config.complete.variables["namespace"]
      environment = data.autocloud_blueprint_config.complete.variables["environment"]
      name        = data.autocloud_blueprint_config.complete.variables["name"]
    }

    modules = [
      autocloud_module.cluster.name,
    ]
  }

  ## --------------------------------------------------------------------------------------------------------------------
  ## GITHUB PULL REQUEST CONFIGURATION
  ## Define the Github pull request content
  ## 
  ## This optional configuration will submit a pull request to Github with the Terraform code generated by this blueprint
  ## after the user has completed the generation steps. This Terraform blueprint is functional without the Github
  ## integration, and the code may be downloaded after submission for review and deployment, as well as the historical 
  ## activity portion of the Iac catalog on AutoCloud.
  ##
  ## Before this feature can be enabled, you will need to integrate
  ## AutoCloud with your Github organization by deploying the AutoCloud Github application. For more information on this
  ## process, see https://docs.autocloud.io/integration-with-source-control-github.
  ##
  ## Once the integration is configured, uncomment the code block below, as well as the code block defining the repository
  ## access parameters at the top of this file.
  ## --------------------------------------------------------------------------------------------------------------------

  ## ----- BEGIN GITHUB CONFIGURATION ----- ##

  ###
  # Destination repository git configuraiton
  #

  # git_config {
  #   destination_branch = "main"

  #   git_url_options = local.dest_repos
  #   git_url_default = length(local.dest_repos) != 0 ? local.dest_repos[0] : "" # Choose the first in the list by default

  #   pull_request {
  #     title                   = "[AutoCloud] new KMS Encrypted S3 Bucket {{namespace}}-{{environment}}-{{name}}, created by {{authorName}}"
  #     commit_message_template = "[AutoCloud] new KMS Encrypted S3 Bucket {{namespace}}-{{environment}}-{{name}}, created by {{authorName}}"
  #     body                    = file("./files/pull_request.md.tpl")
  #     variables = {
  #       authorName  = "generic.authorName"
  #       namespace   = data.autocloud_blueprint_config.complete.variables["namespace"]
  #       environment = data.autocloud_blueprint_config.complete.variables["environment"]
  #       name        = data.autocloud_blueprint_config.complete.variables["name"]
  #     }
  #   }
  # }

  ## ----- END GITHUB CONFIGURATION ----- ##
}
